plugins {
    id 'java'
    id "architectury-plugin" version "3.4.+"
    id "dev.architectury.loom" version "1.2.+" apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = project.archives_base_name
    }

    version = project.mod_version

    repositories {
        maven { url 'https://jitpack.io' }
        maven {
            url "https://squiddev.cc/maven/"
        }
        maven { url "https://maven.terraformersmc.com/" }
        maven { url "https://maven.terraformersmc.com/releases" }
        maven { url "https://maven.shedaniel.me/" }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            // location of the maven that hosts JEI files
            url "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            //used for patchouli
            url "https://maven.blamejared.com/"
        }
        maven {
            //curio
            url = "https://maven.theillusivec4.top/"
        }
        maven {
            //curios
            url 'https://modmaven.dev/'
        }
        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        java.toolchain.languageVersion = JavaLanguageVersion.of(17)
        java.withSourcesJar()
        java.withJavadocJar()
    }

    sourcesJar {
        duplicatesStrategy 'exclude'
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    processResources {
        exclude '.cache'
    }

    processTestResources {
        exclude '.cache'
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.mappings_version}@zip")
        }
    }
}

ext.getArtifactId = { platform -> return "Cosmere-$platform-$minecraft_version" }

ext.getLatestChangelog = {
    Collection<String> lines = file("$rootDir/CHANGELOG.md").readLines()
    String changelog = ""
    Boolean atSegment = false
    for (String line : lines) {
        if (line.startsWith("## ")) {
            if (atSegment) break // hit next segment
            atSegment = true
        }
        if (atSegment) changelog += "$line\n"
    }
    return changelog.trim()
}

tasks.register("viewLatestChangelog") {
    group "documentation"
    description "Print the topmost single version section from the full CHANGELOG.md file."
    doLast {
        println(getLatestChangelog())
    }
}